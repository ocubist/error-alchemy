name: Publish to npm and deploy documentation

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for accurate comparison

      - name: Check for changes in src/ folder
        id: check_changes
        run: |
          git fetch origin main
          if git diff --name-only origin/main HEAD^ | grep '^src/'; then
            echo "Changes found in src/ folder"
            echo "check_changes=true" >> $GITHUB_ENV
          else
            echo "No changes in src/ folder"
            echo "check_changes=false" >> $GITHUB_ENV
            exit 0
          fi

      - name: Set up Node.js
        if: env.check_changes == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies
        if: env.check_changes == 'true'
        run: npm install

      - name: Run tests
        if: env.check_changes == 'true'
        run: npm test

      - name: Build project
        if: env.check_changes == 'true'
        run: npm run build

      - name: Get previous version
        if: env.check_changes == 'true'
        id: prev-version
        run: |
          PREV_VERSION=$(jq -r '.version' package.json)
          echo "PREV_VERSION=$PREV_VERSION" >> $GITHUB_ENV

      - name: Get current version
        if: env.check_changes == 'true'
        id: curr-version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Compare versions and publish
        if: env.check_changes == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Check if the version was manually changed
          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "Version manually updated to $CURRENT_VERSION"
          else
            echo "Version not manually updated, bumping minor version"
            CURRENT_VERSION=$(npm version minor -m "Update to version %s [skip ci]")
            echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          fi

          # Check if tag exists and add if necessary
          git fetch --tags
          TAG_VERSION="v$CURRENT_VERSION"
          if git tag -l | grep -q "^$TAG_VERSION$"; then
            echo "Tag $TAG_VERSION already exists"
          else
            git tag -a "$TAG_VERSION" -m "Release $TAG_VERSION"
            git push origin "$TAG_VERSION"
            echo "Tag $TAG_VERSION added and pushed"
          fi

          # Publish to npm
          npm publish --access public

      - name: Generate documentation
        if: env.check_changes == 'true'
        run: npm run docs

      - name: Copy docs content to environment
        if: env.check_changes == 'true'
        run: |
          mkdir -p /tmp/docs
          cp -r docs/* /tmp/docs

      - name: Deploy documentation to gh-pages-docs branch
        if: env.check_changes == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout gh-pages-docs || git checkout --orphan gh-pages-docs
          git rm -rf .
          cp -r /tmp/docs/* .
          git add .
          git commit -m "Update Documentation to $TAG_VERSION"
          git push origin gh-pages-docs --force
